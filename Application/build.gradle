apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.jakewharton.hugo'
apply plugin: 'android-apt'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'maven'
apply plugin: 'io.fabric'
apply from: 'jacoco.gradle'

def Properties properties = new Properties()
def localProps = project.rootProject.file('local.properties')
def lintConfigFile = project.rootProject.file('lint.xml')
if (localProps.exists()) {
    properties.load(localProps.newDataInputStream())
}
def env = System.getenv()
def env_google_tracker = env["GA_TRACKER_ID"]
def env_firebase_endpoint = env["FIREBASE_ENDPOINT"]
def env_google_api_key = env["GOOGLE_API_KEY"]
def env_google_web_client_id = env["GOOGLE_WEB_CLIENT_ID"]
def google_api_key = properties.getProperty('GOOGLE_API_KEY', env_google_api_key)
def google_web_client_id = properties.getProperty('GOOGLE_WEB_CLIENT_ID', env_google_web_client_id)
def tracker_id = properties.getProperty('GA_TRACKER_ID', env_google_tracker)
def firebase_endpoint = properties.getProperty('FIREBASE_ENDPOINT', env_firebase_endpoint)

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    // Version Info
    def versionMajor = 0
    def versionMinor = 2
    def versionPatch = 7
    // bump for dogfood builds, public betas, etc.
    def versionBuild = Integer.parseInt('git rev-list --count HEAD'.execute([], project.rootDir).text.trim())

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 23
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    }

    splits {
        abi {
//            'mips', 'x86', 'x86_64','armeabi', 'arm64-v8a'
            reset()
            enable true
            include 'armeabi-v7a'
            universalApk false
        }
    }

    sourceSets {
        main {
            java.srcDirs += 'src/main/kotlin'
            res.srcDirs = ['src/main/res',
                           'src/main/res/images',
                           'src/main/res/layouts',
                           'src/main/res/layouts/activity',
                           'src/main/res/layouts/adapter',
                           'src/main/res/layouts/common',
                           'src/main/res/layouts/dialog',
                           'src/main/res/layouts/fragment',
                           'src/main/res/layouts/menu',
                           'src/main/res/layouts/widget',
                           'src/main/res/transition',
                           'src/main/res/values'
            ]
        }
    }

    signingConfigs {
        release {
            //Environment Variables
            def env_keystore_password = env["KEYSTORE_PASSWORD"]
            def env_key_alias = env["KEY_ALIAS"]
            def env_key_password = env["KEY_PASSWORD"]
            //Local build values
            def keystore_password = properties.getProperty('KEYSTORE_PASSWORD', env_keystore_password)
            def key_alias = properties.getProperty('KEY_ALIAS', env_key_alias)
            def key_password = properties.getProperty('KEY_PASSWORD', env_key_password)
            //Signed release commands
            storeFile file("proxy.jks")
            storePassword keystore_password
            keyAlias key_alias
            keyPassword key_password
        }
    }

    productFlavors {
        dev {
            versionName "${versionMajor}.${versionMinor}.${versionPatch}-dev"
            minSdkVersion 17
            targetSdkVersion 23
        }
        full {
            versionName "${versionMajor}.${versionMinor}.${versionPatch}-full"
            minSdkVersion 17
            targetSdkVersion 23
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            buildConfigField "boolean", "USE_CRASHLYTICS", "false"
            ext.enableCrashlytics = false
            //disable google analytics
            buildConfigField "boolean", "USE_GOOGLE_ANALYTICS", "false"
            buildConfigField "String", "GA_TRACKER_ID", tracker_id
            buildConfigField "String", "FIREBASE_ENDPOINT", firebase_endpoint
            buildConfigField "boolean", "USE_LEAK_CANARY", "false"
            buildConfigField "String", "GOOGLE_API_KEY", google_api_key
            buildConfigField "String", "GOOGLE_CLIENT_ID", google_web_client_id
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFile getDefaultProguardFile('proguard-android.txt')
            FileCollection proGuardFileCollection = files { project.rootProject.file('proguard').listFiles() }
            proguardFiles(proGuardFileCollection)
            buildConfigField "boolean", "USE_CRASHLYTICS", "true"
            ext.enableCrashlytics = true
            buildConfigField "boolean", "USE_GOOGLE_ANALYTICS", "true"
            buildConfigField "String", "GA_TRACKER_ID", tracker_id
            buildConfigField "String", "FIREBASE_ENDPOINT", firebase_endpoint
            buildConfigField "boolean", "USE_LEAK_CANARY", "false"
            buildConfigField "String", "GOOGLE_API_KEY", google_api_key
            buildConfigField "String", "GOOGLE_CLIENT_ID", google_web_client_id

            signingConfig signingConfigs.release
        }
    }
    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
        lintConfig = lintConfigFile
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    packagingOptions {
        //duplicate files in Butterknife and Realm?
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    def isTravis = "true".equals(System.getenv("TRAVIS"))
    def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

    dexOptions {
        javaMaxHeapSize "4g"
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !isTravis
//        dexInProcess false
    }
}

afterEvaluate {
    def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
    def crash_key = properties.getProperty('CRASHLYTICS_API_KEY', env["CRASHLYTICS_API_KEY"])
    def crash_secret = properties.getProperty('CRASHLYTICS_API_SECRET', env["CRASHLYTICS_API_SECRET"])
    ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
        entry(key: "apiSecret", value: crash_secret)
        entry(key: "apiKey", value: crash_key)
    }
}

//manual update to gradle 2.9
//task wrapper(type: Wrapper) {
//    gradleVersion = '2.9'
//    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
//}
ext {
    //Google
    playServicesVersion = "8.4.0"
    supportLibVersion = "23.1.1"
    daggerVersion = "2.0.2"
    //kotlin
    kotlinVersion = "1.0.0"
    //Rx
    rxKotlinVersion = "0.40.1"
    rxAndroidVersion = "1.1.0"
    rxRelayVersion = "1.0.0"
    //HTTP
    retrofitVersion = "2.0.0-beta4"
    okHTTPVersion = "3.0.0"
    //UI
    pagerIndicatorVersion = "2.4.1@aar"
    //Realm
    realmVersion = "0.87.4"
    //Images
    androidSVGVersion = "1.2.2-beta-1"
    frescoVersion = "0.9.0"
    //Diagnostic
    leakCanaryVersion = "1.3.1"
    timberVersion = "4.1.0"
    crashlyticsVersion = "2.5.1@aar"
}

dependencies {
    //Local
    compile fileTree(dir: 'libs', include: '*.jar')
    //JetBrains
    compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
    //Google
    compile "com.google.android.gms:play-services-analytics:${playServicesVersion}"
    compile "com.google.android.gms:play-services-auth:${playServicesVersion}"
    apply plugin: 'com.google.gms.google-services'
    //Android
    compile "com.android.support:design:${supportLibVersion}"
    compile "com.android.support:support-v4:${supportLibVersion}"
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:cardview-v7:${supportLibVersion}"
    compile "com.android.support:recyclerview-v7:${supportLibVersion}"
    compile "com.android.support:palette-v7:${supportLibVersion}"
    //Jake
    compile "com.jakewharton.timber:timber:${timberVersion}"
    compile "com.jakewharton.rxrelay:rxrelay:${rxRelayVersion}"
    //Square
    compile "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    compile "com.squareup.retrofit2:adapter-rxjava:${retrofitVersion}"
    compile "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    compile "com.squareup.okhttp3:okhttp:${okHTTPVersion}"
    compile "com.squareup.okhttp3:logging-interceptor:${okHTTPVersion}"
//    compile "com.google.dagger:dagger:${daggerVersion}"
//    compile "com.google.dagger:dagger-compiler:${daggerVersion}"
    //Facebook
    compile "com.facebook.fresco:fresco:${frescoVersion}"
    compile "com.facebook.fresco:imagepipeline-okhttp:${frescoVersion}"
    //ReactiveX
    compile "io.reactivex:rxandroid:${rxAndroidVersion}"
    compile "io.reactivex:rxkotlin:${rxKotlinVersion}"
    //Realm
    compile "io.realm:realm-android:${realmVersion}"
    kapt "io.realm:realm-annotations:${realmVersion}"
    kapt "io.realm:realm-annotations-processor:${realmVersion}"
    //SVG Compat
    compile "com.caverock:androidsvg:${androidSVGVersion}"
    //Bug Tracking
    compile("com.crashlytics.sdk.android:crashlytics:${crashlyticsVersion}") {
        transitive = true;
    }
}
